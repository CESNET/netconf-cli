{
  "comments": [
    {
      "key": {
        "uuid": "e89e5f44_d2d15429",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "please be more descriptive here -- at least say that it\u0027s gonna be used for tab completion of the list keys or something",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35116353_7f88c7c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:43:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89e5f44_d2d15429",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7191a47_e4d64f78",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "is this one really needed? I don\u0027t see that lib using Boost.",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2966dc1_21a7eadb",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:57:06Z",
      "side": 1,
      "message": "Seems like a remainder from previous development.",
      "parentUuid": "f7191a47_e4d64f78",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7e84b7b_b13d09d0",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T16:08:32Z",
      "side": 1,
      "message": "Apparently not, CI refuses to build data_query.cpp without this",
      "parentUuid": "b2966dc1_21a7eadb",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f05ac3be_d4f4069c",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-09T08:50:32Z",
      "side": 1,
      "message": "/home/ci/src/cesnet-gerrit-public/CzechLight/netconf-cli/src/ast_values.hpp:10:10: fatal error: boost/optional.hpp: No such file or directory\n  #include \u003cboost/optional.hpp\u003e\n           ^~~~~~~~~~~~~~~~~~~~\n\n...so this means that boost is used from the included header. A proper fix is to find the CMake target which \"knows\" about this header and add an appropriate INTERFACE or PUBLIC dependency on Boost. If that is not possible for some reason (perhaps CMake doesn\u0027t detect headers that easily?), then that would mean that the dependency is needed, but it should not be a PUBLIC one.",
      "parentUuid": "a7e84b7b_b13d09d0",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9f4f60f_471f8bea",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-10T14:13:31Z",
      "side": 1,
      "message": "I have no idea how to solve this issue :(",
      "parentUuid": "f05ac3be_d4f4069c",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2639cf5_cb7fa9fb",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-12T11:48:09Z",
      "side": 1,
      "message": "Is this still unsolved with that change that adds extra static libs?",
      "parentUuid": "f9f4f60f_471f8bea",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44ae54b6_e65c5eff",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T12:20:23Z",
      "side": 1,
      "message": "It\u0027s not, because data_query.hpp also includes boost :\u003c",
      "parentUuid": "a2639cf5_cb7fa9fb",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41f88d36_68d95fbc",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 276,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "I do not really like this manual ordering (what\u0027s gonna happen when we\u0027re running just a subset of these tests via -R, for example?), but given that the old code was already done like that, OKish.\n\nI\u0027 have some WIP work (a few months old...) which converts this to a RESOURCE_LOCK, so just FYI.",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a56fca61_93f20d13",
        "filename": "CMakeLists.txt",
        "patchSetId": 11
      },
      "lineNbr": 276,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:57:06Z",
      "side": 1,
      "message": "-R works for me. I know my solution is not exactly the best, but it\u0027s better than before (the Improve ctest logic improved it a lot).",
      "parentUuid": "41f88d36_68d95fbc",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5567809b_34a36ffb",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "I would prefer a real struct here. That way, you can use foo.key and foo.value instead of foo.first and foo.second.",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "467220ab_0fe4333d",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T16:07:04Z",
      "side": 1,
      "message": "This type of pair is also elsewhere in the program (the same using is also defined ast_path.hpp, but I didn\u0027t want to include the whole header). I could change this to a struct and ideally also change the other std::pair (the one in ast_path.hpp). This would be a bigger change, I would put that in other another commit (preferably before this one).",
      "parentUuid": "5567809b_34a36ffb",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60e9161c_5182f756",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-09T08:50:32Z",
      "side": 1,
      "message": "I think that the preference for a struct over a random pair is a sound one, so please go ahead.",
      "parentUuid": "467220ab_0fe4333d",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6691506a_10ac0ab7",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T12:54:37Z",
      "side": 1,
      "message": "The newest version doesn\u0027t have this using anymore, but I can still refactor this in the other places where it\u0027s used (in another commit)",
      "parentUuid": "60e9161c_5182f756",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "406f9583_609aaf4b",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "So this one operates on a schmea path, which means that the path does not specify any list keys. I think it would be nice to add a comment (with an example, perhaps?) specifying that the result is gonna be a container of all possible key-value combinations among all list entries.",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa46b24_03ac33ab",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T16:07:04Z",
      "side": 1,
      "message": "This was a mistake - this method should take a data path. I forgot that data paths can also end with a list_ (and not only listElement_). That\u0027s why I used schemaPath_, but it doesn\u0027t make sense. I\u0027m going to change it.",
      "parentUuid": "406f9583_609aaf4b",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02391632_3552db42",
        "filename": "src/data_query.hpp",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T17:27:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3aa46b24_03ac33ab",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57519ab9_752e13ab",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "\"a multi-key list\"",
      "range": {
        "startLine": 71,
        "startChar": 60,
        "endLine": 71,
        "endChar": 66
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07f73040_7844a50a",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:43:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57519ab9_752e13ab",
      "range": {
        "startLine": 71,
        "startChar": 60,
        "endLine": 71,
        "endChar": 66
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc12c5f1_a9214534",
        "filename": "src/schema.hpp",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "please document this one -- what is the purpose?\n\nI *think* that this will provide a container which somehow holds all key names for any number of list keys for a given schema path, but I would naively expect something simpler, such as a simple set\u003cstring\u003e and returning data just for the final list in the path... So, please explain (either here or in the commit message, or perhaps at both places) what this is all about.",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce525fdc_8032e1c5",
        "filename": "src/schema.hpp",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T17:25:58Z",
      "side": 1,
      "message": "I realized I don\u0027t need this. The newest patch doesn\u0027t have this.",
      "parentUuid": "fc12c5f1_a9214534",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29dcee61_baadec68",
        "filename": "src/schema.hpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "from this commit alone, I don\u0027t know why this method is important -- can you add some docs, please?",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dadda36_06a0ed97",
        "filename": "src/schema.hpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T17:25:58Z",
      "side": 1,
      "message": "I realized I don\u0027t need this. The newest patch doesn\u0027t have this.",
      "parentUuid": "29dcee61_baadec68",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e6fed3a_307c5018",
        "filename": "src/static_schema.cpp",
        "patchSetId": 11
      },
      "lineNbr": 280,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "this need exaplanation -- why is this implementation not needed?",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8623746_dc377495",
        "filename": "src/static_schema.cpp",
        "patchSetId": 11
      },
      "lineNbr": 280,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:57:06Z",
      "side": 1,
      "message": "When testing with StaticSchema, I never care about data - and this method really only exists because of list keys completion. I guess I could implement it anyway (even though it\u0027s output is never used).",
      "parentUuid": "9e6fed3a_307c5018",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c800d874_23701cdc",
        "filename": "src/static_schema.cpp",
        "patchSetId": 11
      },
      "lineNbr": 280,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T17:27:00Z",
      "side": 1,
      "message": "I realized I don\u0027t need this. The newest patch doesn\u0027t have this.",
      "parentUuid": "c8623746_dc377495",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5a20bbb_6720e389",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 11
      },
      "lineNbr": 370,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "what needs to be done here?",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271f4eac_448bbde0",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 11
      },
      "lineNbr": 370,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:57:06Z",
      "side": 1,
      "message": "I forgot to remove this.",
      "parentUuid": "a5a20bbb_6720e389",
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "488dd7a4_782cb95f",
        "filename": "tests/data_query.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "I think this one should read just 2019 CESNET, not 2018 FIT\n\n(and perhaps also other files from this year, but that\u0027s for another commit)",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 3,
        "endChar": 52
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5385ecb_2666baaa",
        "filename": "tests/data_query.cpp",
        "patchSetId": 11
      },
      "lineNbr": 3,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:43:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "488dd7a4_782cb95f",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 3,
        "endChar": 52
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68d3c501_df1256f0",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "this looks like something that\u0027s doing exactly the same thing as sysrepo::Callback",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 20,
        "endChar": 2
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e38d00_8fdcbd45",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:43:21Z",
      "side": 1,
      "message": "You\u0027re right, I didn\u0027t realize the base class does this. Changed.",
      "parentUuid": "68d3c501_df1256f0",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 20,
        "endChar": 2
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "822841ad_038bc6ac",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-06T15:06:21Z",
      "side": 1,
      "message": "So the point here is that there are scenarios where you do not care about what you\u0027re actually storing to sysrepo, and you\u0027re only interested in obtaining the data from there (and you also do not care about the communication, just about the result). OK.\n\nNot sure which one is more elegant, but what about doing it like this, without an extra constructor?\n\n  if (rec) {\n      m_callback \u003d std::make_shared\u003cRecorderCallback\u003e(rec);\n  } else {\n      m_callback \u003d std::make_shared\u003csysrepo::Callback\u003e();\n  }\n  m_subscription-\u003emodule_change_subscribe(modName, m_callback);\n\nFeel free to disagree and explain why this one is better.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62101234_301cb78b",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T15:43:21Z",
      "side": 1,
      "message": "The point is that when testing DataQuery, I don\u0027t need to test DatastoreAccess again, but I still need to create an instance of it and also an instance of SysrepoSubscription (so I can add some data for DataQuery to fetch).\n\nI don\u0027t like the idea of passing nullptr to the constructor, it makes much more sense to me to pass nothing. The logic behind the argument is: \"You want to use the recorder in the Callback function? Pass me a pointer to a Recorder. You don\u0027t want to use Recorder? Well, don\u0027t pass anything\". This could also be done be specifying a default value for the constructor, which would still allow passing nullptr, but it would also allow passing nothing. I just really don\u0027t like passing random nullptrs.\nI could also refactor the inside of the constructors to a private function (so that there\u0027s less duplicate code).",
      "parentUuid": "822841ad_038bc6ac",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74b9927a_be37bec1",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-06T17:56:05Z",
      "side": 1,
      "message": "Now that I think of it, you could always pass a nullptr to the constructor right...\n\nThis almost makes me want to change everything to references. I don\u0027t like using pointers and especially nullptrs, when references are enough (this class doesn\u0027t even use shared pointers, so I definitely could use references).",
      "parentUuid": "62101234_301cb78b",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fd53656_d24f5104",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-12T11:48:09Z",
      "side": 1,
      "message": "Please at least make the common body of code shared. I don\u0027t mind much about references vs. smart pointers vs. naked pointers in this context. If you have plenty of time, you can also investigate https://github.com/Microsoft/GSL , but please let\u0027s focus on merging this feature first before performing (much) refactoring.",
      "parentUuid": "74b9927a_be37bec1",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dc05259_d4836861",
        "filename": "tests/mock/sysrepo_subscription.cpp",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T12:41:47Z",
      "side": 1,
      "message": "I used the version with default value. I would have to refactor to references to get rid of nullptr (but I don\u0027t want to do that right now)",
      "parentUuid": "3fd53656_d24f5104",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 65
      },
      "revId": "6b271674f7a0048d4be2c525d857a0cfe8f10a32",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}