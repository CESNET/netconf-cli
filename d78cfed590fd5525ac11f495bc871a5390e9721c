{
  "comments": [
    {
      "key": {
        "uuid": "8ec85675_dac4427a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-05-12T18:19:42Z",
      "side": 1,
      "message": "This needs a Depends-on on a change in CzechLight/dependencies which updates libyang to a version which is now available in the Gerrit mirror under branch cesnet/2020-05-12--submodules.",
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "843c2f30_eac5ebd4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-05-13T11:16:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ec85675_dac4427a",
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccbc2f73_4512a8a0",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-05-12T18:19:42Z",
      "side": 1,
      "message": "nit: This looks a bit messy (\"example-schema\" vs. \"subModule\" in YANG, and \"example_schema\" vs \"includedSubmodule\" in C++). It would be nice if these identifiers were consistent.",
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53e4acda_7032fdcb",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-05-13T11:16:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccbc2f73_4512a8a0",
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9de60e5_e66e61ce",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 444,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-05-12T18:19:42Z",
      "side": 1,
      "message": "The code is more complex than it used to be, so perhaps this could be rewritten now to not use a mixture of asserts and exceptions.\n\nI think I like this:\n\n  if (modName !\u003d \"example-schema\"sv)\n      throw logic_error ...\n  if (subModule \u003d\u003d \"subModule\"sv)\n      return submodule;\n  if (subModule \u003d\u003d nullptr)  // or is that an empty string?\n      return example_schema;\n  throw logic_error ...\n\nor, if you prefer to make it \"extendable\" in future:\n\n  if (modName \u003d\u003d \"example-schema\"sv) {\n      if (subModule \u003d\u003d nullptr) {\n          return example_schema;\n      } else if (subModule \u003d\u003d \"subModule\"sv\") {\n          return includedSubmodule;\n      } else {\n          throw logic_error{\"unrecognized submodule \"sv + subModule};\n      }\n  } else {\n      throw logic_error{\"unrecognized module \"sv + modName};\n  }",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 444,
        "endChar": 71
      },
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d8dcba8_2ae7a205",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 444,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-05-13T11:16:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9de60e5_e66e61ce",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 444,
        "endChar": 71
      },
      "revId": "d78cfed590fd5525ac11f495bc871a5390e9721c",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}