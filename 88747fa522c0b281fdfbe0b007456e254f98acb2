{
  "comments": [
    {
      "key": {
        "uuid": "b3b533cb_c5c98123",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-24T10:38:10Z",
      "side": 1,
      "message": "wow nice, I forgot this existed",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 27
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bef4f06d_40f551d2",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-24T11:19:18Z",
      "side": 1,
      "message": "in some other context, I needed this *and* also an integer index. A stackoverflow suggestion used something like:\n\n for (auto [i, it] \u003d std::tuple{size_t{0}, container.begin()}; it \u003c container.end(); ++i; ++it)\n\n...but that one was failing for some reason for me.",
      "parentUuid": "b3b533cb_c5c98123",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 27
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0bd851_f60ec933",
        "filename": "src/sysrepo_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-24T10:36:08Z",
      "side": 1,
      "message": "Maybe do joinPaths(path, k) here?",
      "range": {
        "startLine": 254,
        "startChar": 54,
        "endLine": 254,
        "endChar": 64
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06776cc9_a6b52d94",
        "filename": "src/sysrepo_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-24T11:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf0bd851_f60ec933",
      "range": {
        "startLine": 254,
        "startChar": 54,
        "endLine": 254,
        "endChar": 64
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12150160_1aabe6e5",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 360,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-24T01:17:50Z",
      "side": 1,
      "message": "Vasek, do you think that this is sane? Does it look like a libnetconf2/libyang bug to you by any chance?",
      "range": {
        "startLine": 357,
        "startChar": 0,
        "endLine": 360,
        "endChar": 6
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0885bdb4_012e547a",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 360,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-24T10:36:08Z",
      "side": 1,
      "message": "It\u0027s a bug in fillMap. fillMap skips everything that\u0027s not a list or a leaf.",
      "parentUuid": "12150160_1aabe6e5",
      "range": {
        "startLine": 357,
        "startChar": 0,
        "endLine": 360,
        "endChar": 6
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd4d202_6055ee28",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 360,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-24T11:20:09Z",
      "side": 1,
      "message": "I will be happy if you fix this (perhaps as an extra patch right before this commit)",
      "parentUuid": "0885bdb4_012e547a",
      "range": {
        "startLine": 357,
        "startChar": 0,
        "endLine": 360,
        "endChar": 6
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c76c6a_07d7d6be",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 1
      },
      "lineNbr": 360,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-24T13:59:41Z",
      "side": 1,
      "message": "I will fix this",
      "parentUuid": "ecd4d202_6055ee28",
      "range": {
        "startLine": 357,
        "startChar": 0,
        "endLine": 360,
        "endChar": 6
      },
      "revId": "88747fa522c0b281fdfbe0b007456e254f98acb2",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    }
  ]
}