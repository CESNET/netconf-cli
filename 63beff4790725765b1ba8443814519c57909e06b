{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a711fc45_b34d1bc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-03-26T17:57:05Z",
      "side": 1,
      "message": "Can you please share the exact input of whatever tests you\u0027re running and the error message from valgrind? On line 256, the default constructor of std::optional\u003cT\u003e is called, which means that that variable cannot be possibly uninitialized (unless I\u0027m wrong about some assumptions about exception handling).\n\nI think that the only chance of a possible \"weird\" behavior is the case of std::optional\u003cstd::string_view\u003e::operator\u003d throwing, but if I\u0027m reading https://en.cppreference.com/w/cpp/utility/optional/operator%3D#Exceptions correctly, and because string_view\u0027s operator\u003d is noexcept, to me this looks like a valgrind false positive.",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b53901d_fa4506c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-26T19:33:48Z",
      "side": 1,
      "message": "I also thought this should not happen, but the sysrepo-cli was crashing and this fixed the crash. I used valgrind only as a debugging tool to discover why/where it was crashing. The system crashing is Yocto-based with security_flags enabled, so it\u0027s not easily reproducible on your side.\nThe crash occurs when I do e.g. `create /ietf-interfaces:interfaces/interface[name\u003d\u0027eth0\u0027]/ietf-ip:ipv4/ietf-ip:address[ip\u003d\u00271.1.1.1\u0027]`. The error says \"terminate called after throwing an instance of \u0027std::bad_alloc\u0027\" and backtrace leads to \"src/yang_schema.cpp:266\"\n\nThe valgrind error says \"Conditional jump or move depends on uninitialised value(s)\", Uninitialised value was created by a stack allocation at 0x15F825: YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}::operator()(libyang::Type const\u0026) const (yang_schema.cpp:182) The entire log with valgrind messages has 9MB.\n\nWhen valgrind is running it also complains much earlier: when I use double-tab to auto-complete the interface name. The valgrind error is exactly the same, however no crash occurs when running without valgrind.",
      "parentUuid": "a711fc45_b34d1bc3",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f3ef5e8_bff77ad0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-03-27T18:23:04Z",
      "side": 1,
      "message": "I have reproduced this on my local machine and I can confirm that valgrind is unhappy when running the `create` command posted above. The errors seem to match your description.\nI don\u0027t have time for it today but I will take a look at it later this week (unless Jan is faster).\n\nReproduce this easily with:\n\n  sysrepoctl -i ../../velia/yang/ietf-interfaces@2018-02-20.yang\n  sysrepoctl -i ../../velia/yang/ietf-ip@2018-02-22.yang\n  valgrind ./sysrepo-cli\n  \u003e create /ietf-interfaces:interfaces/interface[name\u003d\u0027eth0\u0027]/ietf-ip:ipv4/ietf-ip:address[ip\u003d\u00271.1.1.1\u0027]",
      "parentUuid": "4b53901d_fa4506c9",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289ad9d1_42e83b20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-03-27T23:42:35Z",
      "side": 1,
      "message": "Thanks, this is interesting. It\u0027s also crashing for me with a simple command:\n describe /ietf-interfaces:interfaces/interface/name\n\nwith a much shorter backtrace this time:\n\n (gdb) bt\n#0  0x00007ffff795a3b0 in __memcpy_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:765\n#1  0x00000000004ae567 in std::char_traits\u003cchar\u003e::copy (__n\u003d5870440, __s2\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", __s1\u003d\u003coptimized out\u003e) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/char_traits.h:431\n#2  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::_S_copy (__n\u003d5870440, __s\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", __d\u003d\u003coptimized out\u003e) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:423\n#3  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::_S_copy (__n\u003d5870440, __s\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", __d\u003d\u003coptimized out\u003e) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:418\n#4  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::_S_copy_chars (__k2\u003d0xb499f8 \u003cerror: Cannot access memory at address 0xb499f8\u003e, __k1\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", __p\u003d\u003coptimized out\u003e) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:477\n#5  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::_M_construct\u003cchar const*\u003e (__end\u003d0xb499f8 \u003cerror: Cannot access memory at address 0xb499f8\u003e, __beg\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.tcc:243\n#6  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::basic_string (__a\u003d..., __n\u003d5870440, __s\u003d0x5b0690 \"P\\255\\237\\367\\377\\177\", this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:620\n#7  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::basic_string (__a\u003d..., __svw\u003d..., this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:188\n#8  std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e::basic_string\u003cstd::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e, void\u003e (__a\u003d..., __t\u003d..., this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/basic_string.h:787\n#9  std::_Construct\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e const\u0026\u003e (__p\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/stl_construct.h:119\n#10 std::_Optional_payload_base\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e \u003e::_M_construct\u003cstd::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e const\u0026\u003e (this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/optional:278\n#11 std::_Optional_base_impl\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, std::_Optional_base\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, false, false\u003e \u003e::_M_construct\u003cstd::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e const\u0026\u003e (this\u003d0x7ffffffef340)\n    at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/optional:457\n#12 std::optional\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e \u003e::emplace\u003cstd::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e const\u0026\u003e (this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/optional:918\n#13 std::optional\u003cstd::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e \u003e::optional\u003cstd::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e, false\u003e (__t\u003d..., this\u003d0x7ffffffef340) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/optional:783\n#14 YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}::operator()(libyang::Type const\u0026) const (__closure\u003d0x5b4ee0, type\u003d...) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/yang_schema.cpp:264\n#15 0x00000000004aed33 in std::__invoke_impl\u003cyang::TypeInfo, YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}\u0026, libyang::Type const\u0026\u003e(std::__invoke_other, YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}\u0026, libyang::Type const\u0026) (__f\u003d...)\n    at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/invoke.h:60\n#16 std::__invoke_r\u003cyang::TypeInfo, YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}\u0026, libyang::Type const\u0026\u003e(YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}\u0026, libyang::Type const\u0026) (__fn\u003d...)\n    at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/invoke.h:116\n#17 std::_Function_handler\u003cyang::TypeInfo (libyang::Type const\u0026), YangSchema::impl_leafType\u003clibyang::Leaf\u003e(libyang::Leaf const\u0026) const::{lambda(libyang::Type const\u0026)#1}\u003e::_M_invoke(std::_Any_data const\u0026, libyang::Type const\u0026) (__functor\u003d..., __args#0\u003d...) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/std_function.h:291\n#18 0x00000000004a412b in std::function\u003cyang::TypeInfo (libyang::Type const\u0026)\u003e::operator()(libyang::Type const\u0026) const (__args#0\u003d..., this\u003d0x7ffffffef4a0) at /nix/store/j1mifqmnmr74m8y8xkijs5g8nx2bgbqq-gcc-12.2.0/include/c++/12.2.0/bits/std_function.h:591\n#19 YangSchema::impl_leafType\u003clibyang::Leaf\u003e (node\u003d..., this\u003d\u003coptimized out\u003e) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/yang_schema.cpp:266\n#20 0x00000000004a4597 in YangSchema::leafType (this\u003d\u003coptimized out\u003e, path\u003d...) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/yang_schema.cpp:287\n#21 0x00000000004f1f06 in Interpreter::buildTypeInfo (this\u003d0x7ffffffefb90, path\u003d...) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/interpreter.cpp:151\n#22 0x00000000004f4abb in Interpreter::operator() (this\u003d0x7ffffffefb90, describe\u003d...) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/interpreter.cpp:226\n#23 0x0000000000493f1b in boost::apply_visitor\u003cInterpreter, boost::variant\u003cboost::detail::variant::over_sequence\u003cboost::mpl::l_item\u003cmpl_::long_\u003c18l\u003e, cancel_, boost::mpl::l_item\u003cmpl_::long_\u003c17l\u003e, cd_, boost::mpl::l_item\u003cmpl_::long_\u003c16l\u003e, commit_, boost::mpl::l_item\u003cmpl_::long_\u003c15l\u003e, copy_, boost::mpl::l_item\u003cmpl_::long_\u003c14l\u003e, create_, boost::mpl::l_item\u003cmpl_::long_\u003c13l\u003e, delete_, boost::mpl::l_item\u003cmpl_::long_\u003c12l\u003e, describe_, boost::mpl::l_item\u003cmpl_::long_\u003c11l\u003e, discard_, boost::mpl::l_item\u003cmpl_::long_\u003c10l\u003e, dump_, boost::mpl::l_item\u003cmpl_::long_\u003c9l\u003e, exec_, boost::mpl::l_item\u003cmpl_::long_\u003c8l\u003e, get_, boost::mpl::l_item\u003cmpl_::long_\u003c7l\u003e, help_, boost::mpl::l_item\u003cmpl_::long_\u003c6l\u003e, ls_, boost::mpl::l_item\u003cmpl_::long_\u003c5l\u003e, move_, boost::mpl::l_item\u003cmpl_::long_\u003c4l\u003e, prepare_, boost::mpl::l_item\u003cmpl_::long_\u003c3l\u003e, quit_, boost::mpl::l_item\u003cmpl_::long_\u003c2l\u003e, set_, boost::mpl::l_item\u003cmpl_::long_\u003c1l\u003e, switch_, boost::mpl::l_end\u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e\u003e\u0026\u003e(Interpreter const\u0026, boost::variant\u003cboost::detail::variant::over_sequence\u003cboost::mpl::l_item\u003cmpl_::long_\u003c18l\u003e, cancel_, boost::mpl::l_item\u003cmpl_::long_\u003c17l\u003e, cd_, boost::mpl::l_item\u003cmpl_::long_\u003c16l\u003e, commit_, boost::mpl::l_item\u003cmpl_::long_\u003c15l\u003e, copy_, boost::mpl::l_item\u003cmpl_::long_\u003c14l\u003e, create_, boost::mpl::l_item\u003cmpl_::long_\u003c13l\u003e, delete_, boost::mpl::l_item\u003cmpl_::long_\u003c12l\u003e, describe_, boost::mpl::l_item\u003cmpl_::long_\u003c11l\u003e, discard_, boost::mpl::l_item\u003cmpl_::long_\u003c10l\u003e, dump_, boost::mpl::l_item\u003cmpl_::long_\u003c9l\u003e, exec_, boost::mpl::l_item\u003cmpl_::long_\u003c8l\u003e, get_, boost::mpl::l_item\u003cmpl_::long_\u003c7l\u003e, help_, boost::mpl::l_item\u003cmpl_::long_\u003c6l\u003e, ls_, boost::mpl::l_item\u003cmpl_::long_\u003c5l\u003e, move_, boost::mpl::l_item\u003cmpl_::long_\u003c4l\u003e, prepare_, boost::mpl::l_item\u003cmpl_::long_\u003c3l\u003e, quit_, boost::mpl::l_item\u003cmpl_::long_\u003c2l\u003e, set_, boost::mpl::l_item\u003cmpl_::long_\u003c1l\u003e, switch_, boost::mpl::l_end\u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e \u003e\u003e\u0026) (visitable\u003d..., visitor\u003d...) at include/boost/variant/detail/apply_visitor_unary.hpp:66\n#24 main (argc\u003d\u003coptimized out\u003e, argv\u003d\u003coptimized out\u003e) at /home/jkt/work/cesnet/gerrit/CzechLight/netconf-cli/src/cli.cpp:295\n\nThe following patch fixes it:\n\n --- a/src/yang_schema.cpp\n +++ b/src/yang_schema.cpp\n @@ -253,7 +253,7 @@ yang::TypeInfo YangSchema::impl_leafType(const NodeType\u0026 node) const\n                     \" is not supported: \" +\n                      std::to_string(std::underlying_type_t\u003clibyang::LeafBaseType\u003e(leaf-\u003evalueType().base())));\n          }\n -        std::optional\u003cstd::string_view\u003e typeDesc;\n +        std::optional\u003cstd::string\u003e typeDesc;\n  \n          try {\n              typeDesc \u003d type.description();\n @@ -261,7 +261,7 @@ yang::TypeInfo YangSchema::impl_leafType(const NodeType\u0026 node) const\n              // libyang context doesn\u0027t have the parsed info.\n          }\n \n -        return yang::TypeInfo(resType, std::optional\u003cstd::string\u003e{leafUnits}, std::optional\u003cstd::string\u003e{typeDesc});\n +        return yang::TypeInfo(resType, std::optional\u003cstd::string\u003e{leafUnits}, typeDesc);\n\nIt\u0027s too late right now and I cannot figure out whether it\u0027s OK to initialize an std::optional\u003cstd::string\u003e like that from an std::optional\u003cstd::string_view\u003e. Strange that I cannot reproduce that with the newest clang with ASAN+UBSAN...",
      "parentUuid": "3f3ef5e8_bff77ad0",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62b9267a_5eb5c5b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-28T12:51:03Z",
      "side": 1,
      "message": "Thank you! Your patch fixes the problem also on my side: no crashes and no valgrind complaints. Will you commit it, please? I will abandon this one.",
      "parentUuid": "289ad9d1_42e83b20",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4cd5e8_7797948e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-04-06T08:04:00Z",
      "side": 1,
      "message": "@Petr: May I ask what compiler and compiler flags did you use for compilation? It seems to me that this bug appears only on certain compilers and still only with certain optimizations enabled. That leads me to think it may be a compiler bug.",
      "parentUuid": "62b9267a_5eb5c5b8",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6cace5c_644505c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-04-06T12:09:15Z",
      "side": 1,
      "message": "OK, it\u0027s a confirmed gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d109434",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fff5042_5a0a49e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-04-06T18:30:14Z",
      "side": 1,
      "message": "Hats off to you!",
      "parentUuid": "c6cace5c_644505c9",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9e98a46_92f9ab8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-04-07T07:57:17Z",
      "side": 1,
      "message": "I am afraid we will have to commit Jan\u0027s patch anyway. Even if this is a compiler regression I am afraid we have persuade compiler to compile it correctly on gcc 12.x. I will discuss this with Jan on Wednesday. \n\nSorry for the delay.",
      "parentUuid": "5fff5042_5a0a49e8",
      "revId": "63beff4790725765b1ba8443814519c57909e06b",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}