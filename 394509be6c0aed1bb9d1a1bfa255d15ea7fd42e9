{
  "comments": [
    {
      "key": {
        "uuid": "a3594e4a_6876cd6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "Please add a brief description why it\u0027s done the way it\u0027s done -- something about transparently redirecting these setItem/create/delete/... calls, the need for a \"reasonable\" schema, etc.",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4fd85e8_f833dd0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3594e4a_6876cd6b",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "383b3064_ce499419",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "This looks incorrect, surely it makes sense to allow running this:\n\n sysrepo\u003e rpc /foo:shootme\n sysrepo\u003e set how \u003d \"hard\"\n sysrepo\u003e get how            \u003c--- this thing in particular\n hard\n sysrepo\u003e\n\nLooks like it\u0027s going to need tests ðŸ˜Š\n\nBTW, it seems that this printing will not cross RC boundaries. If I\u0027ve opened an RPC and if I do a `get /`, then the RPC\u0027s inputs won\u0027t be shown. OK, that\u0027s probably a reasonable thing to do.",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "129f4792_6322fc89",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "I changed it so that `get how` now gives output",
      "parentUuid": "383b3064_ce499419",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba1db1e3_a847aba7",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T15:29:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "129f4792_6322fc89",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5ed2d32_b495d479",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "What does it mean to \"commit\" stuff in a temporary datastore? (OTOH, I think that requesting a *validation* prior to actually executing that RPC makes sense)",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db5d77ed_f83710d7",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "yangaccess::commitChanges only validates, so commit can be used to validate stuff... but I guess it doesn\u0027t make sense to commit both like this. also, validation prior to executing sounds good, but I\u0027m not sure how to implement that",
      "parentUuid": "c5ed2d32_b495d479",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ed679b9_52bcd887",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T15:29:41Z",
      "side": 1,
      "message": "- commit only the temporary DS just prior to calling that exec\n- or ignore that and rely on the actual backend for validation\n\nI think I like the second option more. It would be nice to have a test which checks what happens when you do something like this:\n\n module \"example\" {\n\n   list \"people\" {\n     leaf \"name\" {\n       type string;\n     }\n     key \"name\";\n   }\n   \n   rpc \"select\" {\n     input {\n       leaf \"whom\" {\n         type leafref {\n           path \"/example:people/name\";\n         }\n       }\n     }\n   }\n }",
      "parentUuid": "db5d77ed_f83710d7",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0db422_62af479c",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T16:09:52Z",
      "side": 1,
      "message": "I added the test",
      "parentUuid": "8ed679b9_52bcd887",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "854191ac_dc3e4ebd",
        "filename": "src/proxy_datastore.cpp",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-17T09:23:49Z",
      "side": 1,
      "message": "Thanks",
      "parentUuid": "5c0db422_62af479c",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72d1868d_47c8316a",
        "filename": "src/proxy_datastore.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "Please add docs about this one, and explain all expectations which this code has over `createTemporaryDatastore`\u0027s behavior",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50981e16_0e29a70d",
        "filename": "src/proxy_datastore.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "I don\u0027t know what kind of expectations I have... I guess the functions needs to return a temporary datastore?",
      "parentUuid": "72d1868d_47c8316a",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d2b8ba4_778547a2",
        "filename": "src/proxy_datastore.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T15:29:41Z",
      "side": 1,
      "message": "It\u0027s a bit more complex, the schemas of both the original DS and the to-be-created one have to match -- they should both return exactly the same data. One way of how we are doing this in the \"actual use\" is via a YangSchema that shares the libyang context.",
      "parentUuid": "50981e16_0e29a70d",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0f6a9a7_91eea570",
        "filename": "src/proxy_datastore.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T16:09:52Z",
      "side": 1,
      "message": "I added a comment",
      "parentUuid": "2d2b8ba4_778547a2",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b0f4354_be434daf",
        "filename": "src/proxy_datastore.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-17T09:23:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0f6a9a7_91eea570",
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ea95f6b_593d20d1",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 10
      },
      "lineNbr": 922,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "These changes look fishy to me -- it\u0027s actively executing a side effect within a SECTION block that was previously only used for preparing some test input. I wanted to propose this:\n\n  auto proxyInput;\n  std::transform(input.begin(), input.end(), std::back_inserter(proxyInput), [rpc](const auto\u0026 x) {\n      return std::make_pair(x.key, rpc + \u0027/\u0027 + x.value);\n  });\n  ...\n  somehow_do_rpc(proxyInput)\n\nbut then I realized that the API of the proxy insists on calls to createItem etc etc, not just setLeaf, oh bummer.\n\nSo please add a comment somewhere which points out why this duplication is required.",
      "range": {
        "startLine": 921,
        "startChar": 0,
        "endLine": 922,
        "endChar": 135
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37e6e4f1_f1d157fd",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 10
      },
      "lineNbr": 922,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "Tbh, I don\u0027t think it\u0027s required, it\u0027s just that the proxydatastore test goes over more layers...",
      "parentUuid": "3ea95f6b_593d20d1",
      "range": {
        "startLine": 921,
        "startChar": 0,
        "endLine": 922,
        "endChar": 135
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a07a6d6_988da056",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 10
      },
      "lineNbr": 922,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T15:29:41Z",
      "side": 1,
      "message": "nah, just say \"This cannot be easily done via reading `input` later on at the end of the test because we need more fine grained operations over proxyDatastore. Not just setLeaf(), but also create(), etc.\"",
      "parentUuid": "37e6e4f1_f1d157fd",
      "range": {
        "startLine": 921,
        "startChar": 0,
        "endLine": 922,
        "endChar": 135
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5d8dd66_95f2cd6a",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 10
      },
      "lineNbr": 922,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T16:09:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a07a6d6_988da056",
      "range": {
        "startLine": 921,
        "startChar": 0,
        "endLine": 922,
        "endChar": 135
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6944dbe4_198f6c56",
        "filename": "tests/interpreter.cpp",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-07-16T13:00:54Z",
      "side": 1,
      "message": "one more here",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 12
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bba7481_5f86b3e8",
        "filename": "tests/interpreter.cpp",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-16T14:21:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6944dbe4_198f6c56",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 12
      },
      "revId": "394509be6c0aed1bb9d1a1bfa255d15ea7fd42e9",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}