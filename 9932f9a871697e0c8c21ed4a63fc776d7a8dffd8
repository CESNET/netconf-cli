{
  "comments": [
    {
      "key": {
        "uuid": "a6c1f81e_52da5b61",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 204,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T13:48:40Z",
      "side": 1,
      "message": "consider using:\n\n return std::any_of(unionInfo.m_unionTypes.begin(), unionInfo.m_unionTypes.end(), [this](const auto\u0026 type) { return std::visit(*this, type); });\n\n(and feel free to reply with an explanation why that would be too ugly)",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 204,
        "endChar": 21
      },
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c3d38e_201eb61c",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 204,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T19:10:00Z",
      "side": 1,
      "message": "Thanks, I forgot this function existed",
      "parentUuid": "a6c1f81e_52da5b61",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 204,
        "endChar": 21
      },
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91dfe282_83015b5d",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T13:48:40Z",
      "side": 1,
      "message": "I think that there\u0027s value in recursively printing all contained types. Two options:\n\n- either from here (and then it would also make sense to move, e.g., leafref destination printing to this visitor as well (in a separate commit)),\n- or from the caller (i.e., in the `describe` command). This will require reimplementing that variant-driven recursion in the `describe` command handler",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe27c54_8262d7cc",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T19:10:00Z",
      "side": 1,
      "message": "I chose the first option.",
      "parentUuid": "91dfe282_83015b5d",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f57b2d_95b06169",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T19:30:25Z",
      "side": 1,
      "message": "looks like the results stored into `ss` are not used",
      "parentUuid": "4fe27c54_8262d7cc",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1e6aa92_86a1b3e3",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T21:02:46Z",
      "side": 1,
      "message": "Oops!",
      "parentUuid": "28f57b2d_95b06169",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cda42c6_042149e6",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 724,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T13:48:40Z",
      "side": 1,
      "message": "please add a test for describing unions as well",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dbb1cbe_2febef02",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 724,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T19:10:00Z",
      "side": 1,
      "message": "Sure, but I don\u0027t think leaf type really matters when asking for a leaf description",
      "parentUuid": "5cda42c6_042149e6",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fda162e_e876e56b",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 724,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T19:30:25Z",
      "side": 1,
      "message": "Sorry -- I did not mean a description, I meant a check for whether union\u0027s inner types are shown in whatever gets called by sysrepo-cli\u0027s `describe` command.",
      "parentUuid": "4dbb1cbe_2febef02",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "063591c1_8e898bb4",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 724,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T21:02:46Z",
      "side": 1,
      "message": "So I should make a test for leafDataTypeToString then",
      "parentUuid": "7fda162e_e876e56b",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8801abf_ae8d2d1e",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 724,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T23:07:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "063591c1_8e898bb4",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17c41e53_317ad9b8",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T13:48:40Z",
      "side": 1,
      "message": "...and I have a feeling that this will need changing as well (move units to the type info?)",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "906f2c79_7914f7ec",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T19:10:00Z",
      "side": 1,
      "message": "Yeah, maybe I should move units to the leafType. In a separate commit?",
      "parentUuid": "17c41e53_317ad9b8",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e291282_3e0303df",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-02T19:30:25Z",
      "side": 1,
      "message": "yup",
      "parentUuid": "906f2c79_7914f7ec",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff16f1b2_cdb5062b",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T23:09:16Z",
      "side": 1,
      "message": "Should I wrap LeafDataTypes variant in a struct with the variant as a member and with a std::optional\u003cstd::string\u003e member called m_units?",
      "parentUuid": "4e291282_3e0303df",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37b25144_1c1b0ce3",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-03T13:26:25Z",
      "side": 1,
      "message": "Looking at RFC 7950, yeah, it seems to me that we\u0027ll be tracking additional type information:\n\n- config (true/false), not implemented yet at all, leads to bugs (https://tree.taiga.io/project/jktjkt-netconf-cli/us/158)\n- status (current/deprectaed/obsolete), not implemented yet, this is important only for the `describe` command I think,\n- description,\n- reference (text), not implemented yet, relevant only for `describe` again,\n- units, some implementation is there, but I think it won\u0027t work for unions; only relevant for `describe`,\n- default (for a default value), I think also only relevant for `describe`\n\nLet\u0027s defer this until later (can you please create Taiga user stories for them?), it has just started looking like a huge amount of work.",
      "parentUuid": "ff16f1b2_cdb5062b",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d65c10bc_efdb3380",
        "filename": "tests/yang.cpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-05T12:05:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37b25144_1c1b0ce3",
      "revId": "9932f9a871697e0c8c21ed4a63fc776d7a8dffd8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}