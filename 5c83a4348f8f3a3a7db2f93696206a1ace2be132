{
  "comments": [
    {
      "key": {
        "uuid": "faccd6f8_46f19b07",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-10T17:13:46Z",
      "side": 1,
      "message": "so this is not needed anymore, right? (it makes sense, after all, and grep agrees -- it\u0027s unused)",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86b32edd_8e4dba8b",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-10T17:14:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "faccd6f8_46f19b07",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b2057be_2a4f7244",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-10T17:13:46Z",
      "side": 1,
      "message": "I think that this is kind of inefficient -- it\u0027s talking to the datastore backend, requesting a full tree of data, and then disregarding a subset of that. I think that NETCONF\u0027s \u003cget\u003e and \u003cget-config\u003e allow retrieval of just the selcted nodes (https://tools.ietf.org/html/rfc6241#section-6.2.4).\n\nIf I remember correctly, the reason why we have a separate DataQuery instance is because we did not want to tie the parser into -- technically -- having the capability of making modifications. This does not mean that this key filtering function should remain outside of DatastoreAccess, though.\n\nWhat do you think about adding an appropriate function to the DatastoreAccess (OK to make it private if you don\u0027t think it belongs to the public API) and just blindly accessing it (via a friend class) from here?",
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71fcdb91_f7624e31",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-20T13:53:34Z",
      "side": 1,
      "message": "I don\u0027t know. The main problem is in the difference between netconf and sysrepo. I suppose it\u0027s not too difficult to use an XML tree with libnetconf to filter the data, but sysrepo only accepts xpath. Maybe I should create the friend function then? Something like `listInstances`. Then I could probably use the XML filter in netconf. Sysrepo would have to use libyang to get required keys and retrieve them manually. DataQuery::listKeys (which I will probably rename to listInstances or something) would probably only be wrapping the DatastoreAccess method.",
      "parentUuid": "1b2057be_2a4f7244",
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4699c9d_300f9f28",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-21T14:42:31Z",
      "side": 1,
      "message": "this is already done, right?",
      "parentUuid": "71fcdb91_f7624e31",
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41c39a4a_2d8879f7",
        "filename": "src/data_query.cpp",
        "patchSetId": 39
      },
      "lineNbr": 26,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-21T15:10:45Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "e4699c9d_300f9f28",
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5744c913_53a16346",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 39
      },
      "lineNbr": 80,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-10T17:13:46Z",
      "side": 1,
      "message": "If I understand this correctly, given this pseudo-schema:\n\n list foo {\n   key \u0027a b\u0027;\n   leaf a;\n   leaf b;\n }\n\nAsking for `foo/a` will get you `foo[a\u003d...,b\u003d...]/a` and also `foo[a\u003d...,b\u003d...]/b`.\n\nIf this is correct, please move this change to a separate commit and add an explicit test that both backends now return the same amount of data.\n\nIf my understanding is incorrect, please explain (in the code or comments) it better :).",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 80,
        "endChar": 57
      },
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d37505ac_e3cb32a3",
        "filename": "src/netconf_access.cpp",
        "patchSetId": 39
      },
      "lineNbr": 80,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-01-17T16:32:06Z",
      "side": 1,
      "message": "A new patch fixes this (and it will be removed from this patch)",
      "parentUuid": "5744c913_53a16346",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 80,
        "endChar": 57
      },
      "revId": "5c83a4348f8f3a3a7db2f93696206a1ace2be132",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}