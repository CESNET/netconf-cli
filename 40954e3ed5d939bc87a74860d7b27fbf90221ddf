{
  "comments": [
    {
      "key": {
        "uuid": "08276d85_ab0283bf",
        "filename": "src/parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T07:29:08Z",
      "side": 1,
      "message": "This is something for a follow-up commit, but I wonder why we need this function. To me, a Parser should parse stuff, not act as a broker between the `ls` command and the schema implementation. The other commands (create, set, get,...) go via DatastoreAccess, so perhaps this implementation should be moved into the Interpreter::operator()(const ls_\u0026).",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eeeddc7e_1cc34e18",
        "filename": "src/parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T08:21:16Z",
      "side": 1,
      "message": "It was a mistake. At first I thought that when implementing `ls`, Interpreter didn\u0027t have access to Schema. But if you do git show 11afac:src/interpreter.{hpp,cpp} (that\u0027s the commit that added ls), you can see that the ctor for Interpreter takes a Schema argument, but just throws it away. So yes, this method isn\u0027t needed.",
      "parentUuid": "08276d85_ab0283bf",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff7b2152_2c862327",
        "filename": "src/parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T18:09:07Z",
      "side": 1,
      "message": "Perhaps nuke it first in a parent commit and then do this change?",
      "parentUuid": "eeeddc7e_1cc34e18",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adbdb60f_e829cdb9",
        "filename": "src/parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T23:38:40Z",
      "side": 1,
      "message": "The actual reason for this method exists is that the m_curDir variable in Parser. The parser needs to hold this context for parsing relative paths. I can still change the implementation, but another problem comes up. Check the new patch for details",
      "parentUuid": "ff7b2152_2c862327",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f12bb7a8_f1019b56",
        "filename": "src/parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T23:48:20Z",
      "side": 1,
      "message": "By new patch I mean the 2493 change",
      "parentUuid": "adbdb60f_e829cdb9",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9076eccc_5d834c7f",
        "filename": "src/static_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T07:29:08Z",
      "side": 1,
      "message": "nit: for me, the \"other way round\" is more readable with that ternary operator, i.e.:\n\n  res.second \u003d (colonLocation \u003d\u003d std::string::npos) ? input : input.substr(colonLocation + 1);\n\nOr at least wrapping into three lines (condition, positive, negative). No need to change, just sharing my POV.",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1395abc2_b2fefc4e",
        "filename": "src/static_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T08:21:16Z",
      "side": 1,
      "message": "But this way, the condition is the same as in the if-statement (the condition means there was a colon in the input string)",
      "parentUuid": "9076eccc_5d834c7f",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bd6e736_6b581454",
        "filename": "src/static_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T18:09:07Z",
      "side": 1,
      "message": "Yeah, so let\u0027s make it even clearer if you don\u0027t mind:\n\n  auto colonLocation \u003d input.find_first_of(\u0027:\u0027);\n  if (colonLocation \u003d\u003d std::string::npos) {\n      return ModuleNodePair{input.substr(0, colonLocation), input.substr(colonLocation + 1)};\n  }\n  return ModuleNodePair{std::nullopt, input};",
      "parentUuid": "1395abc2_b2fefc4e",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d449cb73_d4b28c7e",
        "filename": "src/static_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T23:38:40Z",
      "side": 1,
      "message": "Yes, thank you. I\u0027m (kind of) a fan of the \"make a local var, change it and then return\" approach, but in this case I think it\u0027s better this way. I think I will change my view on these type of algorithms/aproaches/whatever. Maybe the key difference is that the second parameter to the ModuleNodePair is the different in both cases...",
      "parentUuid": "7bd6e736_6b581454",
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a9ed4ee_eff0ff3c",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 789,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T07:29:08Z",
      "side": 1,
      "message": "is it neccessary to include boost::optional\u003cstd::string\u003e in there? If the problem is some ambiguity, would \"example-schema\"s with a string literal work?",
      "range": {
        "startLine": 789,
        "startChar": 21,
        "endLine": 789,
        "endChar": 67
      },
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5938f713_0ea37f22",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 789,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T08:45:03Z",
      "side": 1,
      "message": "Yes, that works!, thanks",
      "parentUuid": "5a9ed4ee_eff0ff3c",
      "range": {
        "startLine": 789,
        "startChar": 21,
        "endLine": 789,
        "endChar": 67
      },
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25f24e93_4169c2b5",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-28T07:29:08Z",
      "side": 1,
      "message": "The order of these elements is different that it used to be, the formatting is different (one per line vs. not so before) and I think that there\u0027s a new \"second-schema:bla\". This makes it hard to review what was changed and why. Please either split this into two commits (one for reordering and reformatting, the second one for real changes), or explain here in a Gerrit comment what changes were intentional and why.",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 834,
        "endChar": 75
      },
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a64a83e_83a13a18",
        "filename": "tests/yang.cpp",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-28T08:45:03Z",
      "side": 1,
      "message": "The diff should now be clearer",
      "parentUuid": "25f24e93_4169c2b5",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 834,
        "endChar": 75
      },
      "revId": "40954e3ed5d939bc87a74860d7b27fbf90221ddf",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}