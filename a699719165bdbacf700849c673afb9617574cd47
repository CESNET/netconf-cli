{
  "comments": [
    {
      "key": {
        "uuid": "613a60de_13e82587",
        "filename": "src/leaf_data.cpp",
        "patchSetId": 14
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "nit: I would just write:\n\n res \u003d identity.m_prefix.get().m_name + \u0027:\u0027;",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 23
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "882761e7_7aee67ce",
        "filename": "src/leaf_data.cpp",
        "patchSetId": 14
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "613a60de_13e82587",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 23
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcd426a8_03539602",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "My C++-fu is low today, but I wonder if this is needed. Can you perhaps enforce this type of `ast` in the method\u0027s signature and save a copy constructor here? Or would that be ugly because this will not be a template with the same templating parameters as other functions? Or just skip that call to copy ctor anyway, and use `ast` directly in the same manner as done in leaf_data_call\u003cyang::Enum\u003e?",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f4717ad_121d6403",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I need to construct a new identityRef_ because I\u0027m using it to search on line 69. And I can\u0027t use `ast` directly, because I would sometimes change the value on line 66. Maybe I can change `ast` to from T\u0026 to T, but that would not save the copy ctor anyway.",
      "parentUuid": "fcd426a8_03539602",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a28a8c81_f2956ffb",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T22:43:12Z",
      "side": 1,
      "message": "Ack, thanks, this makes sense.",
      "parentUuid": "5f4717ad_121d6403",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ec3cc03_377b5987",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 132,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "please add doxygen comments for all these three members",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 15
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d343ccb_29ca7a8d",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 132,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I don\u0027t have them documented on line 204 either. It\u0027s just something that Spirit needs. But I guess I can do some research on what they mean.",
      "parentUuid": "9ec3cc03_377b5987",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 15
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b15aa834_538b070f",
        "filename": "src/leaf_data.hpp",
        "patchSetId": 14
      },
      "lineNbr": 132,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-01T01:28:23Z",
      "side": 1,
      "message": "OK, let\u0027s not hold your progress by this one :)",
      "parentUuid": "2d343ccb_29ca7a8d",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 15
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b3105fd_0f77cd06",
        "filename": "src/leaf_data_type.cpp",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "This looks like a convenience method for a unit test (or a static schema), and there\u0027s no such constructor overload for IdentityRef. I *think* that it\u0027s better to remove this convenience helper.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e8d7492_27b5f03c",
        "filename": "src/leaf_data_type.cpp",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I moved the helper to another file.",
      "parentUuid": "3b3105fd_0f77cd06",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2fb81de_74a8f52b",
        "filename": "src/leaf_data_type.cpp",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I moved the helper to another file.",
      "parentUuid": "3b3105fd_0f77cd06",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05ef222a_aba9a7c5",
        "filename": "src/leaf_data_type.hpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "nit: these structs (Enum, IdentityRef, LeafRef) do not really have any methods for encapsulation, so I would prefer their members to not use the m_ prefix, but feel free to ignore this",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b222342_1d34fec0",
        "filename": "src/leaf_data_type.hpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I know what you mean, but I like having the prefix. I still like it even considering it doesn\u0027t have methods.",
      "parentUuid": "05ef222a_aba9a7c5",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe5ddeff_81bf58af",
        "filename": "src/leaf_data_type.hpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T22:43:12Z",
      "side": 1,
      "message": "OK, this is your project.",
      "parentUuid": "1b222342_1d34fec0",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af91bbc9_352e38c9",
        "filename": "src/schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "I spent some time pondering about what to do with this method. If the \"type name\" was part of LeafDataType, that would mean that it could be printed in more places in the UI. However, I think that this would really only make sense for unions, and there\u0027s currently no way of calling describe on individual union \"members\", so I think this is fine as-is.",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62c1a794_e292847a",
        "filename": "src/static_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 107,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "I think that this can be refactored into that new validIdentities().",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e739dfbb_97f68a82",
        "filename": "src/static_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 107,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I kept it as a function for recursion",
      "parentUuid": "62c1a794_e292847a",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92789791_b512f567",
        "filename": "src/static_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 107,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T22:43:12Z",
      "side": 1,
      "message": "OK, makes sense",
      "parentUuid": "e739dfbb_97f68a82",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb6668b_59dd5265",
        "filename": "src/static_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 139,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "it\u0027s used now",
      "range": {
        "startLine": 139,
        "startChar": 42,
        "endLine": 139,
        "endChar": 59
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7af73912_283a1bd7",
        "filename": "src/static_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 139,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcb6668b_59dd5265",
      "range": {
        "startLine": 139,
        "startChar": 42,
        "endLine": 139,
        "endChar": 59
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0ccd782_2ebd7e21",
        "filename": "src/static_schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 63,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "This looks a bit fishy to me. Previously, it was a virtual method which is no longer needed. Both of non-abstract Schema implementations however still have a method \"validIdentities\" which is not documented, and whose argument differ, and which is public in StaticSchema and private in YangSchema. Please get rid of that by either:\n\n- turning it into a private helper and listing all possible values in the unit test,\n- or adding a comment which explains that this is for making unit tests a wee bit easier",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4b74c84_d78887b7",
        "filename": "src/static_schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 63,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "I added the comment",
      "parentUuid": "d0ccd782_2ebd7e21",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3bb6373_f45e25d6",
        "filename": "src/static_schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 78,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "are you going to fix this in a follow-up comment, or is that just a generic reminder for unspecified future?",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f6f802_2c99fe04",
        "filename": "src/static_schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 78,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Generic reminder. I\u0027m definitely not changing it in this commit.",
      "parentUuid": "d3bb6373_f45e25d6",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c57fe11e_3b0603e0",
        "filename": "src/static_schema.hpp",
        "patchSetId": 14
      },
      "lineNbr": 78,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T22:43:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b2f6f802_2c99fe04",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f35cf9_863efa0c",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "random comment: It\u0027s an empty struct (and same for essentially everything below), so I would not bother with passing as a reference here.",
      "range": {
        "startLine": 56,
        "startChar": 45,
        "endLine": 56,
        "endChar": 46
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa4c7072_c8f8e229",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10f35cf9_863efa0c",
      "range": {
        "startLine": 56,
        "startChar": 45,
        "endLine": 56,
        "endChar": 46
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c806c11f_dec486ad",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-04-02T11:38:08Z",
      "side": 1,
      "message": "Actually for Enum, IdentityRef and LeafRef (and upcoming Union) it makes sense to pass by reference, what do you think?",
      "parentUuid": "fa4c7072_c8f8e229",
      "range": {
        "startLine": 56,
        "startChar": 45,
        "endLine": 56,
        "endChar": 46
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66d0b3df_e1dfbb18",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 119,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "Better leave this out so that adding a new primitive YANG type results in a build error instead of an exception at runtime. It\u0027s a variant now, so the error can be caught at the build time.",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c37ab13_2727cd02",
        "filename": "src/utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 119,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66d0b3df_e1dfbb18",
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97076c2c_a1a9167f",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 241,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-03-31T21:50:21Z",
      "side": 1,
      "message": "nit: I think that it is not needed to preserve that exception string here; if you\u0027re changing it, let\u0027s get rid of this redundant text now",
      "range": {
        "startLine": 241,
        "startChar": 96,
        "endLine": 241,
        "endChar": 126
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1d12105_fe353555",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 14
      },
      "lineNbr": 241,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T22:34:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97076c2c_a1a9167f",
      "range": {
        "startLine": 241,
        "startChar": 96,
        "endLine": 241,
        "endChar": 126
      },
      "revId": "a699719165bdbacf700849c673afb9617574cd47",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}