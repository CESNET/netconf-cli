{
  "comments": [
    {
      "key": {
        "uuid": "79bc394f_81dcf049",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-09T08:50:32Z",
      "side": 1,
      "message": "What about other YANG types such as binary or enum? (And test coverage, please.)",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c724889_b392f3eb",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-10T15:36:53Z",
      "side": 1,
      "message": "This is just a helper function, it\u0027s not exposed in any header, but I added more `listKeys` tests which test this function.",
      "parentUuid": "79bc394f_81dcf049",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d060b1a_8372739e",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-12T11:55:32Z",
      "side": 1,
      "message": "What I\u0027m saying is that this code puts strings into \u0027quotes\u0027 for list keys if the key YANG data type is a string.\n\nMy question is, what happens if the YANG data type of the key is:\n\n- enum,\n- identityref,\n- binary,\n- anything else?\n\nPerhaps it\u0027s somehow OK, it\u0027s just that I cannot find the answer to this in the RFCs (and I don\u0027t remember reading about that one in sysrepo/libyang docs, either). Just convince me that you\u0027ve thought about the answer, preferably via a test :).",
      "parentUuid": "2c724889_b392f3eb",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c920c21_537c1fe4",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-19T15:04:25Z",
      "side": 1,
      "message": "Thanks, it starts looking good :). Have you considered other types as well, and/or do you plan to include them in this commit?",
      "parentUuid": "3d060b1a_8372739e",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3585a36_1d82c486",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-19T15:33:50Z",
      "side": 1,
      "message": "I looked at other types and it seemes everything will need quotes except number types. We talked about this a while ago: when typing values for keys, only number values don\u0027t need quotes. This really makes me want to just get rid of this difference and make quotes mandatory even for numbers. This behavior comes from the way the values are parsed: they are parsed as quoted strings OR as unquoted strings consisting of only digits (so, a number).\n\nSo, the if statement really should look like this: \"if (value.type() !\u003d typeid(uint8_t) \u0026\u0026 value.type() !\u003d typeid(uint16_t) \u0026\u0026 \u003call the other integer types here\u003e)\"",
      "parentUuid": "9c920c21_537c1fe4",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f59b792_44294313",
        "filename": "src/data_query.cpp",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-19T23:41:00Z",
      "side": 1,
      "message": "\u003e This really makes me want to just get rid of this difference and make quotes mandatory even for numbers. \n\nWhat does the definition say -- do they allow foo\u003d5 syntax, or do they insist on foo\u003d\u00275\u0027?\n\n\u003e So, the if statement really should look like this: \"if (value.type() !\u003d typeid(uint8_t) \u0026\u0026 value.type() !\u003d typeid(uint16_t) \u0026\u0026 \u003call the other integer types here\u003e)\"\n\nIf the standard allows unquoted numbers, please make it happen.",
      "parentUuid": "a3585a36_1d82c486",
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6aeb11b_f540b842",
        "filename": "src/data_query.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-09T08:50:32Z",
      "side": 1,
      "message": "From this snippet, I do not understand how the class is going to be used. I have not written the code, so I do not know, but I can imagine a few very different scenarios:\n\n- perhaps it dumps me all possible key/value pairs for the latest list in the path,\n- hmm, but it\u0027s a set, that\u0027s weird, why is not indexed by the key name, i.e. a map\u003cstring, set\u003cstring\u003e\u003e?\n- does it really work on just the last list, then? What about a /foo:foo[k1\u003d5]/bar[k2\u003d6]?\n- I see it takes a data path, not a schema path now. How does it handle \"partial indexing\", i.e. scenarios where paths specify just a subset of all keys for a given list?\n\nSo, this needs more:\n\n- docs,\n- test coverage",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02a23fb7_1186bfab",
        "filename": "src/data_query.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-10T14:08:06Z",
      "side": 1,
      "message": "It does dump all possible key/value pairs for the list specified by the path argument. If I look at the test file for this class, it\u0027s pretty clear to me what it does, but I will add a doc.\n\nI will probably change the return value to a map. Maybe it wasn\u0027t such a good idea to implement this class first and only then try to integrate it to the parser. I thought a set would be okay, but a map will probably work better.\n\nYes, it does only work on the last list. Why would you think it works for something else?\n\nIt doesn\u0027t handle partial indexing, you can\u0027t even supply a partially indexed list path to this method (well, not in a valid way, that would make sense).",
      "parentUuid": "b6aeb11b_f540b842",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2b51b0f_72f4f974",
        "filename": "src/data_query.hpp",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-12T11:48:09Z",
      "side": 1,
      "message": "\u003e Yes, it does only work on the last list. Why would you think it works for something else?\n\nBecause of that return type which was used by a previous version of this patch.",
      "parentUuid": "02a23fb7_1186bfab",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "b16e3c5a5f518b9f518a6035465007e2fd3bb157",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}