{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fd4d8cc9_c2d3bf45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 49
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "what do you mean by this -- how does this affect the end-user operation of the app? can I query the output nodes as well (e.g., their types/desc)?",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 65
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64cd2deb_88169be8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 49
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T09:23:22Z",
      "side": 1,
      "message": "I\u0027m not sure if you could do that even before... well, at least there are no tests for that, I guess I could add them? Anyway, the real problem is that an input node and an output node could have the same name, so there could be collisions...",
      "parentUuid": "fd4d8cc9_c2d3bf45",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 65
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56c290ff_9a092686",
        "filename": "/COMMIT_MSG",
        "patchSetId": 49
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-18T10:01:50Z",
      "side": 1,
      "message": "One possibility would be adding the `input` and `output` names to schema paths, but that sounds like an intrusive change. Another option is something like `describe --output \u003cTab\u003e`. OK, let\u0027s defer this until later.",
      "parentUuid": "64cd2deb_88169be8",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 65
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da849730_b30902a9",
        "filename": "src/netconf-client.cpp",
        "patchSetId": 49
      },
      "lineNbr": 131,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "If there\u0027s no \u003cerror-message\u003e and no \u003cerror-path\u003e, then the resulting error message will be just some whitespace. Is there a reasonable way around that, like logging at least the tags or something else? Actually, why are the tags not logged?",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "def109b3_7ef8549d",
        "filename": "src/netconf-client.cpp",
        "patchSetId": 49
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T09:23:22Z",
      "side": 1,
      "message": "I wasn\u0027t aware of how the format looked like when I was writing this. I\u0027ll improve it.",
      "parentUuid": "da849730_b30902a9",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "153be60b_fb545e8c",
        "filename": "src/netconf-client.cpp",
        "patchSetId": 49
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "def109b3_7ef8549d",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21d2d9f7_1add3013",
        "filename": "src/yang_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 72,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "does this need any change now that there\u0027s also that module for YANG schema mount?",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d063684_65c724b7",
        "filename": "src/yang_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 72,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21d2d9f7_1add3013",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74f0c319_6cf7ba53",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 86,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "is this still needed with ly2? The linked issue showed a small hint that it might not be needed in future, and I think that future might have happened. Could you please check whether we have that feature in this future? :)",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 86,
        "endChar": 51
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7291db7f_2447e228",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 86,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-21T10:37:51Z",
      "side": 1,
      "message": "It seems that it is not needed, I tested this https://tree.taiga.io/project/jktjkt-netconf-cli/issue/50",
      "parentUuid": "74f0c319_6cf7ba53",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 86,
        "endChar": 51
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a9fad29_a44a2bd3",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 109,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "this needs an inline comment (it looks to me that this thing will look for regular nodes as usual, and input rpc/action nodes if that\u0027s the case, and that it needs a flag to go look for the output nodes)",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f5be43b_293f0cfd",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 109,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-21T10:37:51Z",
      "side": 1,
      "message": "I have updated the comments to make them clearer",
      "parentUuid": "4a9fad29_a44a2bd3",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7919df7_f17f3d36",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 305,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "the linked issue shows one way of *possibly* getting this info in certain cases; can you please implement that?",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1daa5f1_bc8d8b23",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 305,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-24T03:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7919df7_f17f3d36",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd0754a0_ad3ca902",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 486,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "now that it\u0027s not a C-style bitfield, but a proper enum, please use a switch here so that the compiler warns us if something is not handled",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 486,
        "endChar": 5
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "444cdabb_e412095d",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 486,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd0754a0_ad3ca902",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 486,
        "endChar": 5
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90943d69_13271334",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 507,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "when does this happen, and why it\u0027s important to silently ignore these errors?",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bec9247_f33b1415",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 507,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "the old code code does that I am not sure why exactly...",
      "parentUuid": "90943d69_13271334",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c735308b_22803590",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 507,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-18T10:01:50Z",
      "side": 1,
      "message": "I\u0027m not talking about \"a default return\", but about error handling. How come that this now needs exception handling? Is this new version perhaps calling this method on an invalid path while it was not doing so in the ly1 version?",
      "parentUuid": "4bec9247_f33b1415",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bdbb574_fe3e8120",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 507,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-21T10:37:51Z",
      "side": 1,
      "message": "This method is mainly used in the `describe` method and also to filter out nodes for the `set` command. The original code checked the flags field and returned true if the LYS_CONFIG_W was present. new libyang-cpp now has a method for retrieving config true/false that checks for the LYS_CONFIG_W and LYS_CONFIG_R flags. If neither is present, then it throws. This is the only time it can throw. However, netconf-cli expects that for these kinds nodes (for example RPC nodes), YangSchema::isConfig returns false. I have updated the comment.",
      "parentUuid": "c735308b_22803590",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "831360a2_40940cda",
        "filename": "src/yang_schema.cpp",
        "patchSetId": 49
      },
      "lineNbr": 507,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-21T19:40:06Z",
      "side": 1,
      "message": "thanks",
      "parentUuid": "1bdbb574_fe3e8120",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84264839_ca9b0ace",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "What does it mean? Is there a behavior change? I also do not understand the comment because no matter how an actual change is constructed, even if it\u0027s an overwrite of a DS by some other data, the end result should be always the same (AFAIK) -- there\u0027s some old state, there\u0027s some new state, and these two states can be compared and the resulting diff presented to the change CB.",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca172fe6_9512e992",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "at this point I have no idea, but I think it\u0027s just that when NetconfAccess writes stuff, it the underlying sysrepo does stuff a different way than when SysrepoAccess directly writes stuff. The resulting datastore contents are the same, but the change callbacks differ. I guess there can be many ways to describe a DS change by these ChangeOperations?",
      "parentUuid": "84264839_ca9b0ace",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b3b85e_fc2eadda",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-18T10:01:50Z",
      "side": 1,
      "message": "As a minimum, the comment needs updating.\n\nHowever, if the NETCONF and sysrepo backends differ, that\u0027s a pretty strong indication that it needs a careful review. Are you sure that the NETCONF operation that you send is a correct move (\"move `http` to the end\")? How does it look on the wire?",
      "parentUuid": "ca172fe6_9512e992",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18059132_68d07aec",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-21T09:49:40Z",
      "side": 1,
      "message": "I am quite sure, because I also check the state after the operation wth getItems. For the sysrepo backend, the change notification is 100% correct.\n\nMy reasoning for why the notifications differ is that with SysrepoAccess, I directly use `sr_move_item`, however, with NetconfAccess, sysrepo might not have this info form libnetconf2 (that I\u0027m just moving one item) and need more general notifications to encode the change. For YangAccess, I\u0027m using sysrepoctl to replace the config, so there\u0027s also probably not enough info... I guess I can ask on GH if my assumption is correct.",
      "parentUuid": "75b3b85e_fc2eadda",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0032ae8e_253ebbad",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-21T12:25:04Z",
      "side": 1,
      "message": "I checked with a sample program and it seems that my assumption is probably not correct... I\u0027ll investigate more",
      "parentUuid": "18059132_68d07aec",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44da902a_b37abc96",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-22T08:26:19Z",
      "side": 1,
      "message": "My assumption may be correct, I asked here https://github.com/sysrepo/sysrepo/issues/2732",
      "parentUuid": "0032ae8e_253ebbad",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e72809b8_8d54e9bb",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 673,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-24T03:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44da902a_b37abc96",
      "range": {
        "startLine": 672,
        "startChar": 0,
        "endLine": 673,
        "endChar": 77
      },
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58cb2091_0861536e",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 984,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "check that, please (ASAN should yell if there\u0027s a problem) -- simply removing the SysrepoSubscription should do the trick, I suppose?",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69a1a357_a3b93a83",
        "filename": "tests/datastore_access.cpp",
        "patchSetId": 49
      },
      "lineNbr": 984,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "I swapped them and ASAN says nothing, so I guess the problem is no longer there",
      "parentUuid": "58cb2091_0861536e",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca903b5b_dbc2a30b",
        "filename": "tests/yang.cpp",
        "patchSetId": 49
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-15T20:35:56Z",
      "side": 1,
      "message": "this needs an update now that the schema mounts landed",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b3173f4_4bd829c5",
        "filename": "tests/yang.cpp",
        "patchSetId": 49
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-02-17T16:08:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca903b5b_dbc2a30b",
      "revId": "6ed5c00f06333e106516c724e9c71130d6413898",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}